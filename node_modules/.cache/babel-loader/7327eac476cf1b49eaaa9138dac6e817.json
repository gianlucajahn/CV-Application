{"ast":null,"code":"var global = require('../internals/global');\n\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\n\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar defineBuiltIn = require('../internals/define-built-in');\n\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\n\nvar isForced = require('../internals/is-forced');\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\n\n\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target\n\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    } // add a flag to not completely full polyfills\n\n\n    if (options.sham || targetProperty && targetProperty.sham) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n\n    defineBuiltIn(target, key, sourceProperty, options);\n  }\n};","map":{"version":3,"names":["global","require","getOwnPropertyDescriptor","f","createNonEnumerableProperty","defineBuiltIn","defineGlobalProperty","copyConstructorProperties","isForced","module","exports","options","source","TARGET","target","GLOBAL","STATIC","stat","FORCED","key","targetProperty","sourceProperty","descriptor","prototype","dontCallGetSet","value","forced","undefined","sham"],"sources":["C:/Users/Gianluca/Documents/itWork/Projects/cvApps/node_modules/core-js/internals/export.js"],"sourcesContent":["var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineGlobalProperty = require('../internals/define-global-property');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || defineGlobalProperty(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    defineBuiltIn(target, key, sourceProperty, options);\n  }\n};\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,wBAAwB,GAAGD,OAAO,CAAC,iDAAD,CAAP,CAA2DE,CAA1F;;AACA,IAAIC,2BAA2B,GAAGH,OAAO,CAAC,6CAAD,CAAzC;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,8BAAD,CAA3B;;AACA,IAAIK,oBAAoB,GAAGL,OAAO,CAAC,qCAAD,CAAlC;;AACA,IAAIM,yBAAyB,GAAGN,OAAO,CAAC,0CAAD,CAAvC;;AACA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,wBAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAQ,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;EAC1C,IAAIC,MAAM,GAAGF,OAAO,CAACG,MAArB;EACA,IAAIC,MAAM,GAAGJ,OAAO,CAACX,MAArB;EACA,IAAIgB,MAAM,GAAGL,OAAO,CAACM,IAArB;EACA,IAAIC,MAAJ,EAAYJ,MAAZ,EAAoBK,GAApB,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,UAAzD;;EACA,IAAIP,MAAJ,EAAY;IACVD,MAAM,GAAGd,MAAT;EACD,CAFD,MAEO,IAAIgB,MAAJ,EAAY;IACjBF,MAAM,GAAGd,MAAM,CAACa,MAAD,CAAN,IAAkBP,oBAAoB,CAACO,MAAD,EAAS,EAAT,CAA/C;EACD,CAFM,MAEA;IACLC,MAAM,GAAG,CAACd,MAAM,CAACa,MAAD,CAAN,IAAkB,EAAnB,EAAuBU,SAAhC;EACD;;EACD,IAAIT,MAAJ,EAAY,KAAKK,GAAL,IAAYP,MAAZ,EAAoB;IAC9BS,cAAc,GAAGT,MAAM,CAACO,GAAD,CAAvB;;IACA,IAAIR,OAAO,CAACa,cAAZ,EAA4B;MAC1BF,UAAU,GAAGpB,wBAAwB,CAACY,MAAD,EAASK,GAAT,CAArC;MACAC,cAAc,GAAGE,UAAU,IAAIA,UAAU,CAACG,KAA1C;IACD,CAHD,MAGOL,cAAc,GAAGN,MAAM,CAACK,GAAD,CAAvB;;IACPD,MAAM,GAAGV,QAAQ,CAACO,MAAM,GAAGI,GAAH,GAASN,MAAM,IAAIG,MAAM,GAAG,GAAH,GAAS,GAAnB,CAAN,GAAgCG,GAAhD,EAAqDR,OAAO,CAACe,MAA7D,CAAjB,CAN8B,CAO9B;;IACA,IAAI,CAACR,MAAD,IAAWE,cAAc,KAAKO,SAAlC,EAA6C;MAC3C,IAAI,OAAON,cAAP,IAAyB,OAAOD,cAApC,EAAoD;MACpDb,yBAAyB,CAACc,cAAD,EAAiBD,cAAjB,CAAzB;IACD,CAX6B,CAY9B;;;IACA,IAAIT,OAAO,CAACiB,IAAR,IAAiBR,cAAc,IAAIA,cAAc,CAACQ,IAAtD,EAA6D;MAC3DxB,2BAA2B,CAACiB,cAAD,EAAiB,MAAjB,EAAyB,IAAzB,CAA3B;IACD;;IACDhB,aAAa,CAACS,MAAD,EAASK,GAAT,EAAcE,cAAd,EAA8BV,OAA9B,CAAb;EACD;AACF,CA9BD"},"metadata":{},"sourceType":"script"}